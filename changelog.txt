2022.01.29
Change the ASCII art, a bit more compact, no more 'jail' motif
Some random minor tweak or two, can't remember (oops)

2022.01.15
Only tune/activate Voice LCN channels IF a frequency is specified for LCN channel in site.csv file

Introduce Single Dongle Mode as Experimental Version using only one dongle for CC and VC using RTL_UDP
-Recommend only use Single Dongle Mode if monitoring digital only system
-Recommend only use Single Dongle Mode on strong signals, otherwise may not tune back to CC when a call ends
-Don't use Single Dongle Mode if you only wish to decode and not tune signals

Added new interactive scripts to set up and run in Single Dongle Mode
Added edacs-fm-single.c file
Added edacs-fm-single.c to build and rebuild files

Will probably need to do a new git pull and build for this to work properly

2022.01.04
Fix Spacing issue on Logical LCN Status in Call Matrix Display area
Tweak Status LCN Nomenclature Slightly

2022.01.03
General Cleanup and Clarifying Comments in code
Add Special Logical LCN status (LCN > 25) to Call Matrix Display

Test disabling lcn_tally and peers on resettime now that BCH is enabled and Logical Status LCNs sorted.
Will still reset patches after 20 minutes due to presumtion that they may expire eventually

Fix a few values/conditions still using fr_1 and not fr_1t
(Honestly, doesn't matter since its after poly test, but doing it for consistency)

Change LCN to &9lld for uniformity and equal legnth on LCN in printw area
Change RID to %7lld for uniformity and equal legnth on LCN in printw area
Change other RID instances from %6lld to %7lld (20 bits can go as high as 7 decimal values high)
Expand fences by 3 (total now 78 columns wide, just under standard 80)

Squash Bug on Call Matrix display for Standard/Network blinking in and out of existence
(Accidentally was using lcn and not i; forgot to change that on last update)

Swap RID and TG in EA voice.log to be consistant with whats displayed in printw

Small tweak/addition to ASCII art :), make it 78 columns wide

2022.01.01-3
Fixed an additional oversight preventing logical status LCN from printing to log
needed to move logic for setting the write pending bit in the call matrix out of the printw area loop,
make it its own mini for loop and iterating over 1-31 as opposed to the printw using lcn_tally

2022.01.01-2
Fix minor oversight in logging to actually print logical status LCNs, was implemented, but print loop only iterated lcns accumulated on lcn_tally
had to change behavior to iterate on all 31 potential LCNs instead of on observed and tallied LCNs

2022.01.01
implementing information regarding high LCN channel numbers found at:
  https://wiki.radioreference.com/index.php/EDACS#Technical_Information

Fix LCNs higher than 25 tallying up and wrecking the printw area, print logical meaning of LCN in log
(Will still display in Call Matrix, but without status context)
Also, don't attempt to open calls on LCNs higher than 25.

Revert change EA to only open MT-1 0x3 [0][0][0][1][1] Calls
now opens on mt-1 0x1, 0x2, 0x3 calls (even if they aren't used, haven't witnessed a 0x1 tdma or 0x2 data call yet)

delete old code blocks no longer used, old comments, general cleanup, try to fix indentation a bit but probably made it worse

Update Copyright year/month

Update edacs-lcn to specify dot detection squelch is currently disabled
(using edacs-fm to hangup is working very well, will most likey stay this way and will find a new use for edacs-lcn aside from being a nice ascii art display)
idea: edacs-lcn to optionally use built in d*d-decoder? Need to look into issues with mbelib

Happy New Year!

2021.12.21-2
Fix gcc warning, change %d to %lld on afs.log

2021.12.21
Improved Call Activation - Won't attempt to tune multiple active calls at the same time.
set active = 0/1 for determining if call is currently active and not to retune during open call
set current_lcn to denote which one is active, after 1 second of not being seen again is used to check down to set active back to 0
Print * to screen on call if call is set to active and is being listened to
Add Currently Active LCN to Site Extra

Remove unused variables and loops, i.e. print_timeri, voice_to, etc
Begin experimenting with Better Logging Support (No Dupes during multiple active calls) Using Call Matrix new column for logged bit
call_matrix[i][4] = 0 for not written, 1 for pending, 2 for written, 0 while call is active on CC, 1 when call goes red, and 2 when finally written
(only small issue with new method is if sender changes on LCN while still active, will only log last sender (or group) seen on LCN before it goes red)
Slightly Revised Log Format - More Compact, no more tab indents

use hangup variable in conjunction to hanguptime to only send squelchSet once for hanguptime, instead of constantly
Experiment with hanging up active LCN with edacs-fm again, see if that prevents delayed hangup on edacs-lcn or hangup on active call in edacs-lcn
--squelchSet(5000) added to active = 0 condition; temporarily disabled squelchSet in lcn

Concluded that garbled date in Cygwin logs is a Cygwin/GCC problem, no simple fix, sorry :(

2021.12.19
Change EA to only open MT-1 0x3 [0][0][0][1][1] Calls due to false positives on calls with 0x1 and 0x2 call types
Experiment with auto detecting ESK on and off (A == 1) using F88 for peer site relay
Experiment with auto detect Standard/Network/EA <- using F3 Unknown on Networked
When prompted for EDACS type, enter A for Autodetect
If System type not specified on launch, will default to auto now instead of EA w/ ESK
Add printw line in Site Info to indicate which type of system was auto detected or manually set, and to which system type
Put AFC back to being just right on SNR, seems to not be so bad on the eye when its on the far end.
Update Scripts to include Auto option and also if user wants universal denial mode

2021.12.15
Move SNR to old AFC location, wasn't originally here due to weird printw glitch with getDate string,
Fixed afs.log splat by seperating date and time fprintf strings from other fprintf functions
Corrupt dates in log in cygwin builds still persists, needs more research

2021.12.14
Minor cleanup, clean up commented areas
comment/disable portions of bch3.h that aren't used currently
Switch over to using fr_1t and fr_4t for all values (error checked, pass poly test)
Add mt1 and mt2 to EA logging; pin point which call type triggers high LCN values, remove when done
Attempt disable extra super redundant fr_1 == fr_3 after BCH check, disable fr_2, fr_3, fr_5, fr_6
Adjust indentation after removing redundant check if statements
Remove "Shadow" affect from ASCII art, tweak banner thanks.

2021.12.13
Initial BCH calculation implementation for error detection
currently just discards bad ECC messages, accuracy up significantly
Eliminate Patch Dups (target and source are same)
Rearrange printw yet again, mostly due to AFC values causing eye strain due to rapid change
removed AFC in favor of using SNR - "Signal to Noise Ration", basically good frames / total frames processed

2021.12.11
Workaround for bug involving overzealous squelching by:
Disabling usleep in lcn for making extra delay
Bug didn't effect Linux installs, but was more noticeable in Cygwin builds.
Channels may still hangup early IF dotting sequence is detected right when the LCN channel grant changes to a new channel.
a.k.a. these stupid radio operators need to wait a half second before keying up and replying.

2021.12.10
Add new CLI options S C P Q L, removed these options from -V or debug > 0
-S: Display Site Extra in printw area
-C: Display Call Matrix in printw area
-P: Display Patches in printw area
-Q: Enable logging of peers and patches
-L: Enable voice call logging

Updated Sample Configuration scripts to be completely interactive at start up, asking for frequency, device, gain, PPM, csv files, etc
and which display and logging options the user will want to use, advanced users can still make their own start up skipping all questions

Add rtl_test.exe to cygwin builds for device indexing on startup script.

2021.12.07
Add 'fences' to areas of the terminal printw area to make it a little easier on the eye and label each area
Make an initial Cygwin build script with example uses for Cygwin/Windows users
Current issue with Cygwin build: All log files have garbled date string, not sure why, something between cywgin gcc locale and encoding?
Little tweaks/cleanup
New Screenshot for updates look with fenced areas

2021.12.05
Minor Cleanup of comments in code and clarifying what does what in the code
Minor Cleanup on edacs-lcn.c, removing unused static values,
Extend hanguptime to 30 seconds for super annoying long winded callers

2021.12.04
Noticed an ESK site rolling with its ESK turned off, had to impelement an Extended Addressing option minus the ESK
Also, had some values hard coded for EA-ESK, decided to switch all Extended Addressing to soley use mt1 and mt2 values instead of commands.
get rid of defined hard static commands, wasn't really using any of them aside from ID_CMD, switched to variable idcmd
update startup scripts to include new user definable settings

2021.12.03
turn static SYNC_TIMEOUT into user definable sync_timeout variable with -t seconds, default 3 seconds

2021.12.02
Make Patch Array print in 2 columns in ncurses window to fit more in the space provided without overflowing at the bottom, gave it a nice fence too
Added FR_1 and FR_4 ncurses print to debug mode
Make Call Matrix print, much like Patch Array does in verbosity mode, used as a sort of 'Call History' but overwritten each pass on an LCN
Clean up little odd and end commented out bits

2021.11.30
idea: get rid of voice_to; use call_matrix? keep calls from flip flopping when one is active already? may tie into logging as well.
investigate hanguptime hanging up calls in progress that exceed 15 seconds, observed once, just speculating.

2021.12.01
Clean up or delete tons of unused variables, reorganized code
speed up code, made singular printw screen based on the frame sync
lots of random under the hood stuff
another round through the c beautifier to clean up my terrible indentation scheme
rearragne layout slightly, added date and moved peer sites to top just under site id info
moved status bits and mt-1 mt-2 bits to verbose mode only,
reassign colors slightly, amber/yellow for control/frame sync, for magenta for no signal/sync, green for active call, red for disconnect call, cyan for debug info/patches
completely removed edacs standard/network "sender" or "radio id", not sure it co-exists with AFS and can't reliably produce it with my current knowledge

ideas:  on/off bit in call_matrix, log when 0 and not 1? find way to log only once? per-call log and not based on LCN?
todo: add print usage back into it, completely removed
idea2: experiment with windows builds, had a little luck before, but obstacles too. Need to learn how to use cross-compiling tools or get v** studio c++ and try that?

Time to take a break from this project! Enjoy Life!

2021.11.29
change patch_array building to test for already containing sourcep and targetp; instead of just targetp
call_matrix and group_matrix coded, allows for displaying multiple calls at once
ended voice calls turn red in the display and persist for 5 seconds

lowered print_timeri value; would remove but screen flickers
(may experiment with using just one print and not two seperate for call and idle commands)

2021.11.28
Increase Peer List to 12, not sure how many peers a very large site would usually have

2021.11.27
Add logging of Peers and Patches to pandp.log file, logs all peers and patches in the array after ititial 60 seconds of signal
Will reset logtime counter when site_id changes, signal loss, or after 10 minutes, and log again
Will log peers and patches when site_id changes (i.e. using SDR++ or GQRX) or signal loss event
No more VC squelch when CC lost, rely on dotting sequence detection to handle hanging up since it works very well
Enumerated Patch Array printw in -v mode
call logging no longer throttled by 1 second, will print duplicates IF multiple calls active, but better than missing calls on log
(Call logging and display will be fixed/improved when an actual call array is created)

2021.11.26
Happy Birthday!
Make small array for peers instead of cycling through them;
contemplating doing same for all patches, but may require more array space than I'm willing to code for.
Does anybody really look at patches anyways?
changed peer sites and patches to display on ESK EA sites by default now, no more -v required
individual peer site with control channel LCN listing still available via -v option

midnight addendum:
make a 50 row patch array, only viewable with -v verbosity mode, it fills up quite a bit of screen space
(subject to removal if performace issues occur)

fix minor spacing OCD issues of mine
2021.11.25
Happy Thanksgiving!
Put Patches and Peer Site Listing back in, view with -v for verbosity

2021.11.19
Minor tweaks to logging
reset lcn_tally if signal lost/changed/new site ID
reset lcn_tally after 20 minutes (resettime variable)
tweak start-lcn-gr script, set float-to-short for lcn channel up from 500 to 700

work on dotting sequence detection; working it into gnuradio, gr and rtl scripts
remove some squelch conditions from edacs-fm now that dotting sequence detection is working
tweaking gnuradio sample rates, down to 28.8k on lcn channel
(being very careful not to introduce overrun/underrun issues for gnuradio, sox, or aplay)
make sure both dotting sequence detection and digital audio decoding both work at same time

TODO STILL: update all grc files and generate new python scripts with 28.8k and 700 float. TEST TEST TEST!!!
ADD string variables for rtl devices in gnuradio, getch string in pyEDACS.py maybe? look into it.
Find way for user to use other device sources, like airspy or whatever
Use GNURADIO for signal source, line in from scanner? release along with wav player maybe? things to look into.

2021.11.12
Fast Forward 1 Year

Officially splintered/rebranded EDACS-FM Florida Man Edition, EDACS-LCN, and PyEDACS Control Deck FME.
Many MANY new features and bug fixes.
Too many to list them all.
Now supports gnuradio and comes with startup scripts for PyEDACS.
Still supports rtl_fm and rtl_udp.
Now includes ability to import csv files for sites (freqs) and groups (allow,block,encrypted).
Now includes logging to voice.log or afs.log.
Removed unnecesarily redundant versions of same software.
(May bring back the analyzer in the future for dumping raw FR files)
Verified working with EDACS Standard, Networked, Networked ESK, and ESK Extended Addressing systems.
License change to GPL license to match gnuradio companion app files and software.

Why Rebrand? Offer more clarity to what the software does, and offer fresh start, match license type to gnuradio, because Florida Man is funny to me.

Known Bugs/"Features":
Call scrolling too fast (need to make array, see below)
Calls not all logged if same group/sender: Logging only occurs once a second, so if same group/caller goes really fast, doesn't make cut off.
Calls duplicated in log if channel is super SUPER busy. Similar to above, need to make array and TTL.
Need to set ulimit -s to 16M to avoid segfault/core dump, caused by making array on the stack. See below.

Wish List:

Florida Man Edition: Fix Array to use Heap and not Stack, Make Array for active calls and patches, etc. Figure out reliable way to find sender on non EA systems. Reimplement dotting detection in the LCN channel, since it wasn't very reliable, going to look into a few leads. Keyboard controls for PyEDACS, RF gain, PPM, Frequency adjustments via keyboard and getch().

Long Term: Make GUI version.

----Original Change Log preserved down below, despite some errors-----


V0.3b Build 2020.10.06
Introducing NCURSES build of ledacs-esk as a new seperate program
 ledacs-esk-ncurses is a drop in replacement for ledacs-esk, call with same parameters
  or use nstart.sh file included; modify at your leisure
 users will need to install libncurses5-dev and libncurses5 to use ledacs-esk-ncurses
 ledacs-esk and ledacs-esk-analyzer are still available


Updated readme.txt to reflect usage of ledacs-esk-ncurses
Cleaned up readme.txt in regards to AFC vs OFF and fixed/clarified AFC OFF meaning
Included ledacs-esk-ncurses into build, rebuild, and pi-build script files

Site ID now prints as decimal and hex side by side (my personal preference)
Nice ascii art added to ledacs-esk-ncurses

V0.28 Build 2020.09.08
Had to Fix LCN again, was grabbing 6 bits instead of 5;
 Would have potentially caused issues with that extra bit grab on higher LCN numbers

V0.27 Build 2020.09.07
Implemented Channel Assignment Types for:
   MT-1:
   00001 - TDMA Group Voice Channel Assignment
   00010 - Group Data Channel Assignment
   000ll - Digital Group Voice Channel Assignment
   11111 - Use MT-2

   MT-2:
   0000 - Initiate Test Call
   1101 - Serial Number Request

Changed 'VOICE' to 'ACTIVE' when a channel is active and
added printout to bottom to show which of the above it is.

Moved site_id to error detected FR frames in logic
Misc other printout tweaks

Reinstated ADD and KICK listings only in analyzer, way too verbose for normal use.

Added pi-build.sh which includes 'cmake .. -DDETACH_KERNEL_DRIVER=ON' line to prevent
need to manually modprobe -r kernel driver prior to using dot-detector and rtl_udp.

V0.26 Build 2020.08.31

Fix LCN channel by acquiring the correct bits; It did work(by fluke), but would have had issues
if the particular site had more than 16 LCN channels

V0.25 Build 2020.08.24
Finally Fixed Site ID to list the correct ID (thanks EricCottrell)
Changed Group ID from 7FFF to FFFF (16 bit GID)
Changed Status to 5-bit MT-1 Status and 4-bit MT-2 Status
MT-1 and MT-2 Binary Print out in Debug 1 and higher
(Also need to work on MT-A/MT-B/MT-D)
Put lshifter back in for ESK EA LCN; need somebody to test LCNs on normal EDACS
Site ID may still be incorrect on non ESK and/or non EA variants
May need to break backwards compatibilty, unsure.

V0.24 Build 2020.08.22
Implemented PEER listing on debug 2 (too verbose to make a normal feature)
Re-wrote sender, group, lcn, and status variables to draw from FR instead of SR
Implemented 'error detection' by comparing fr messages, not full-proof but better
Included 'understanding_frames.txt' file that breaks down FR 40 bit message segments
Minor tweaks to IDLE printing while VOICE still active
Updated Debug to print FR blocks and implemented Debug 3 for
printing all error checked FR blocks, and Debug 4 for
non-error checked blocks.

V0.23 Build 2020.08.21
Implemented Human Readable 'FR' blocks of 40 bit (10 HEX) code to
represent the 40 bit segments of 'messages' the control channel
sends in pairs of threes. Will use this to impliment error checking
in future updates.

Found method to pipe signal from GQRX over UDP into analyzer with nc and sox.
Added gqrx_udp_signal.sh as an example file/usable script.
May add more info on its use in future updates.

Updated to only print AFS info when set to legacy EDACS argument on startup.
(Probably isn't reliable anyways unless its a 4-4-3 AFS bit setup)

V0.22 Build 2020.08.17
Minor code cleaning and tweaking
Cleaned up Debug and simplified
Debug 0 = No verbosity
Debug 1 = SR output for Idle and Voice and legacy AFS info
Debug 2 = Display all commands received, status, and SR, plus debug 1
(Update: SR has been replaced with more human readable FR)
Tinkering with .detector script sample output sound rate (boosted to 48000 mono out)

V0.21 Build 2020.08.15
Fix bug in ledacs-esk-analyzer that didn't show calls placed due to removal of LCNs
Implemented lshifter as an internal variable that changes based on which EDACS system is specified.

v0.2 Build 2020.08.12

Implimented allow/deny lists for groups and senders
Cleaned up or removed lots of code and comments
Removed all code related to PATCH, ID, DATA, and other commands as they were too complex
Removed distinction between a normal call and a PVT call, since it didn't seem reliable
Renamed standalone.sh to analyzer.sh, so I could call ./start.sh with tabs faster
Renamed ledacs-esk-standalone to ledacs-esk-analyzer for consistency
Other minor tweaks/fixes
Inadvertent new bugs probably


Known Issues:

1.) Site ID, LCN, Group, Sender, or other values may temporarily report an incorrect number.

This issue is primarily due to a lack of any real error detection, if the signal or samples read in that
exact moment by the software are 'off', then incorect values may temporarily show up.  Due to the simplicity
of this software, this issue will most likely not be fixed, but shouldn't greatly affect the performance
of the software. For now, best fix may be to ensure good signal with your dongle, adjust position/antenna
if its convenient.

Update: Since implementing FR blocks and error detection, this seems to behave much better, but
may still occur just not nearly as frequently as it used to. True way to fix this would probably
be to implement a second register and compare them, but this could potentially cause bad performance.
Most likely better to sacrifice accuracy for maintaining performance.

2.) Voice channels may open for groups/senders in the deny list

This is due to two factors, the first, as above, iccorect values streaming into the software, it may open
the channel for a bogus group or sender if it didn't read it correctly. Second, the manner of checkdown
that occurs checking the current group versus the deny list, it may open up if the group or sender is
further down the list. A 'quick fix' was implimented to set the squelch high to close the channel, but
this may introduce new issues such as closing a desired voice channel when the denied group/sender
attempts to speak up at the same time.

3.) Allow List overrides Deny list

If you have items in the allow list and the deny list, the deny list will be ignored in favor of the
allow list. This is by design, Allow list only allows what you manually specify, denying everything
else.

4.) Segmentation fault if incorrect variables are given at command prompt or in start.sh, standalone.sh.

I haven't had time to rewrite the arguments portion of the software, partially out of not wanting to
break more stuff and end up banging my head against my desk trying to figure it out. Been focused more
on getting what works to work better and stripping out things that don't work so well. Also, I'm not
a good programmer, laziness, busy, etc. etc. Just be sure to use all the required arguments for now.

5.) Unknown functionality with other variants of EDACS

Currently, this software has only been tested against a few EDACS ESK control channels, since
I don't have any other EDACS in my home area, I have yet to be able to test it against the
original and other variants of EDACS. Any feedback would be appreciated. If nothing happens
for you and you are sure you are tuned to a EDACS CC, then please run debug options on for verbose
details and feel free to submit them.

rtl_fm -d 0 -f 851375000 -s 28.8k -p 0.5 -g 49 | ./ledacs-esk site243 1 1 3 allow deny >> debug.txt

Run something similar to above for a few moments and then ctrl-c to close it, then submit the
debug.txt file with a description of the type of EDACS system, any known site ID, etc.

6.) Incorrect Site ID.
Testing has shown that the Site ID is most likely not pulling from the correct portion
of the control channel signal, will need more testing. The location of the Site ID seems
to vary from one CC to another, will need more research.

Update: Still trying to figure this out after implementing FR blocks. So far, I can't find
a reliable pattern to pull site info from. My working hypothesis is that its obscurred or
has multiple rules in play for solving it.

Update Update: Finally figured this out thanks to some seriously awesome help from
EricCottrell at the Radio Reference forums. He had some notes that seriously put
that to bed.
